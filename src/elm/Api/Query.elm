-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (BuildsOptionalArguments, EnvironmentRequiredArguments, ProjectRequiredArguments, builds, environment, me, project, projects, selection, slackConfiguration)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Select fields to build up a top-level query. The request can be sent with
functions from `Graphql.Http`.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) RootQuery
selection constructor =
    Object.selection constructor


type alias EnvironmentRequiredArguments =
    { id : String }


{-| -}
environment : EnvironmentRequiredArguments -> SelectionSet decodesTo Api.Object.Environment -> Field (Maybe decodesTo) RootQuery
environment requiredArgs object_ =
    Object.selectionField "environment" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


{-| -}
me : SelectionSet decodesTo Api.Object.User -> Field decodesTo RootQuery
me object_ =
    Object.selectionField "me" [] object_ identity


{-| List of projects
-}
projects : SelectionSet decodesTo Api.Object.Project -> Field (List decodesTo) RootQuery
projects object_ =
    Object.selectionField "projects" [] object_ (identity >> Decode.list)


type alias ProjectRequiredArguments =
    { id : String }


{-| -}
project : ProjectRequiredArguments -> SelectionSet decodesTo Api.Object.Project -> Field (Maybe decodesTo) RootQuery
project requiredArgs object_ =
    Object.selectionField "project" [ Argument.required "id" requiredArgs.id Encode.string ] object_ (identity >> Decode.nullable)


{-| -}
slackConfiguration : SelectionSet decodesTo Api.Object.SlackConfiguration -> Field decodesTo RootQuery
slackConfiguration object_ =
    Object.selectionField "slackConfiguration" [] object_ identity


type alias BuildsOptionalArguments =
    { page : OptionalArgument Int, pageSize : OptionalArgument Int }


{-| List of builds
-}
builds : (BuildsOptionalArguments -> BuildsOptionalArguments) -> SelectionSet decodesTo Api.Object.Build -> Field (List decodesTo) RootQuery
builds fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { page = Absent, pageSize = Absent }

        optionalArgs =
            [ Argument.optional "page" filledInOptionals.page Encode.int, Argument.optional "pageSize" filledInOptionals.pageSize Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionField "builds" optionalArgs object_ (identity >> Decode.list)
